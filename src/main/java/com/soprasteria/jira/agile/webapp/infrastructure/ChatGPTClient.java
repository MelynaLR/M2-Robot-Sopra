package com.soprasteria.jira.agile.webapp.infrastructure;

import okhttp3.*;

import java.io.IOException;
import java.util.List;
import java.util.concurrent.TimeUnit;

import com.soprasteria.jira.agile.webapp.models.Issue;
import org.apache.commons.text.StringEscapeUtils;
import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;
import org.json.JSONArray;

/**
 * Client class to interact with ChatGPT API for generating recommendations.
 */
@Component
public class ChatGPTClient {
	
	@Value("${chatgpt.token}")
	private String API_KEY;
	
    private static final String API_URL = "https://api.openai.com/v1/chat/completions";
    private static final String MODEL_IDENTIFIER = "gpt-3.5-turbo"; // OR "gpt-4"
    
    /**
     * Generates a recommendation from ChatGPT based on provided issues, additional instructions, and conversation history.
     *
     * @param issues List of issues to analyze
     * @param additionalInstructions Additional instructions for ChatGPT
     * @param conversationHistory Conversation history
     * @return Recommendation generated by ChatGPT
     */
    public String generateRecommendation(List<Issue> issues, List<String> additionalInstructions, List<String> conversationHistory) {
        OkHttpClient client = new OkHttpClient.Builder()
                .connectTimeout(300, TimeUnit.SECONDS)
                .writeTimeout(300, TimeUnit.SECONDS)
                .readTimeout(150, TimeUnit.SECONDS)
                .build();
        
        // Prepare the input prompt
        StringBuilder promptBuilder = new StringBuilder();
        promptBuilder.append("Act as an Agile methodology consultant and Jira professional. Given the following Jira issues, analyze the team's application of Agile methodology and provide improvement recommendations:\n");

        for (Issue issue : issues) {
            promptBuilder.append("- ").append(issue.getDescription()).append(" with ").append(issue.getUserPoints()).append(" user points\n");
        }
        
        promptBuilder.append("Answer as a continuation to this conversation, so don't give the advice again if the user is just asking about something else (if there's nothing, then ignore this sentence) : ").append("\n");
        for (String message : conversationHistory) {
            promptBuilder.append("- ").append(message).append("\n");
        }
        
        promptBuilder.append("Take into account the following instructions : ").append("\n");
        for (String instruction : additionalInstructions) {
            promptBuilder.append(instruction).append("\n");
        }
        
        String prompt = promptBuilder.toString();

        // Escape special characters in the user's content
        String escapedPrompt = StringEscapeUtils.escapeJson(prompt);

        // Prepare the JSON payload with the "model" parameter
        String json = String.format("{\"model\":\"%s\",\"messages\":[{\"role\":\"system\",\"content\":\"You are a helpful assistant.\"},{\"role\":\"user\",\"content\":\"%s\"}]}", MODEL_IDENTIFIER, escapedPrompt);

        // Print the JSON data for debugging
        System.out.println("JSON Data: " + json);

        // Build the request
        RequestBody requestBody = RequestBody.create(json, MediaType.parse("application/json"));
        Request request = new Request.Builder()
                .url(API_URL)
                .addHeader("Content-Type", "application/json")
                .addHeader("Authorization", "Bearer " + API_KEY)
                .post(requestBody)
                .build();

        // Execute the request
        try {
            Response response = client.newCall(request).execute();

            if (response.isSuccessful()) {
                String responseBody = response.body().string();
                System.out.println("Response from ChatGPT API: " + responseBody);
                return extractRecommendation(responseBody, conversationHistory);
            } else {
                System.err.println("Error from ChatGPT API: " + response.code() + " " + response.body().string());
            }
        } catch (IOException e) {
            e.printStackTrace();
        }

        return "Error generating recommendation";
    }
    
    /**
     * Adds user's query to the conversation history.
     *
     * @param query User's query
     * @param conversationHistory Conversation history
     */
    public static void addUserQuery(String query, List<String> conversationHistory) {
        conversationHistory.add("User: " + query);
    }

    private static String extractRecommendation(String responseBody, List<String> conversationHistory) {
        try {
            // Parse the JSON response
            JSONObject jsonResponse = new JSONObject(responseBody);

            // Retrieve the recommendation from the JSON
            JSONArray choices = jsonResponse.getJSONArray("choices");
            JSONObject firstChoice = choices.getJSONObject(0);
            JSONObject message = firstChoice.getJSONObject("message");
            String recommendation = message.getString("content");
            
            conversationHistory.add("ChatGPT: " + recommendation);

            // Return the extracted recommendation
            return recommendation;
        } catch (Exception e) {
            // Handle any parsing errors
            e.printStackTrace();
            return "Error extracting recommendation";
        }
    }
    
    /**
     * Appends additional instructions to the prompt sent to ChatGPT.
     *
     * @param additionalInstructions List of additional instructions
     * @return List of additional instructions
     */
    public static List<String> promptEngineering(List<String> additionalInstructions) {
        additionalInstructions.add("Mettez l'accent sur les recommandations qui correspondent aux principes Agile.");
        additionalInstructions.add("Prenez en compte la collaboration et la communication de l'équipe dans vos recommandations.");
        additionalInstructions.add("Mettez en évidence les meilleures pratiques de la méthodologie Agile et de l'utilisation de Jira.");
        additionalInstructions.add("Fournissez des suggestions pour résoudre toute dette technique identifiée dans les problèmes.");
        additionalInstructions.add("Soyez attentif aux points d'histoire utilisateur et à leur impact sur l'avancement du projet.");
        additionalInstructions.add("Proposez des outils ou des intégrations Agile supplémentaires qui pourraient bénéficier à l'équipe.");
        additionalInstructions.add("Évaluez l'efficacité de la planification des sprints dans la résolution des problèmes Jira.");

        return additionalInstructions;
    }
}
